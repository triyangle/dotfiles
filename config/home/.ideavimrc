set nocompatible
let mapleader = "\<Space>"
let os = substitute(system('uname'), '\n', '', '')
set surround

set scrolloff=5
set timeoutlen=1000 ttimeoutlen=0
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set ruler
set mouse=a
set incsearch
set ignorecase
set infercase
set smartcase
set autoread
au CursorHold * checktime
set omnifunc=syntaxcomplete#Complete
set showcmd
set modeline
set modelines=5
set hidden
set breakindent
set spelllang=en_us

set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent

set wildmenu
set wildignorecase
set wildmode=longest:full,full

if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
else
  set clipboard=unnamed
endif

" OP visual mode .
vnoremap . :norm.<CR>
xnoremap . :norm.<CR>

xnoremap Q :'<,'>:normal @q<CR>

autocmd VimResized * wincmd =

"Show airline bar
set laststatus=2

syntax on

set number
set relativenumber
set cursorline

"not recommended for now
"set nobackup

set backspace=indent,eol,start

filetype plugin indent on
autocmd FileType html,javascript,css,scheme,vim,zsh,sh,bash setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType crontab setlocal nowritebackup
autocmd FileType markdown,text setlocal wrap linebreak nolist

:iabbrev </ </<C-X><C-O>

nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

nnoremap <leader>s :mksession<CR>

nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

nnoremap 0 g0
nnoremap $ g$
nnoremap ^ g^
nnoremap I g^i
nnoremap A g$a

nnoremap <expr> gj v:count ? 'gj' : 'j'
nnoremap <expr> gk v:count ? 'gk' : 'k'

nnoremap g0 0
nnoremap g$ $
nnoremap g^ ^
nnoremap gI I
nnoremap gA A

vnoremap <expr> j v:count ? 'j' : 'gj'
vnoremap <expr> k v:count ? 'k' : 'gk'

vnoremap 0 g0
vnoremap $ g$
vnoremap ^ g^
" vnoremap I g^i
" vnoremap A g$a

vnoremap <expr> gj v:count ? 'gj' : 'j'
vnoremap <expr> gk v:count ? 'gk' : 'k'

vnoremap g0 0
vnoremap g$ $
vnoremap g^ ^
vnoremap gI I
vnoremap gA A

noremap <F3> :call Spelling()<CR>
noremap <leader>3 :call Spelling()<CR>

nnoremap <silent> <F5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

"Solarized dark
syntax enable
set background=dark
highlight Comment cterm=italic

" Markdown fenced code syntax highlighting
au BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages =
      \ ['java',
      \ 'scheme',
      \ 'python',
      \ 'sql',
      \ 'vim',
      \ 'viml=vim',
      \ 'bash=sh',
      \ 'tex',
      \ 'zsh',
      \ 'html',
      \ 'css',
      \ 'javascript',
      \ 'js=javascript',
      \ 'json=javascript']

"Easy buffer switching
map <leader>n :bn<cr>
map <leader>p :bp<cr>
map <leader>d :bd<cr>

function! OpenLines(nrlines, dir)
  let nrlines = a:nrlines < 2 ? 2 : a:nrlines
  let start = line('.') + a:dir
  call append(start, repeat([''], nrlines))
  if a:dir < 0
    normal! 2k
  else
    normal! 2j
  endif
endfunction
" Mappings to open multiple lines and enter insert mode.
nnoremap <Leader>o :<C-U>call OpenLines(v:count, 0)<CR>S
nnoremap <Leader>O :<C-U>call OpenLines(v:count, -1)<CR>S

nnoremap o o<esc>S
nnoremap O O<esc>S

" OS specific settings
if os == 'Linux'
  hi Normal ctermbg=none
  highlight NonText ctermbg=none

  if has("autocmd")
    au VimEnter,InsertLeave * silent execute '!echo -ne "\e[2 q"' | redraw!
    au InsertEnter,InsertChange *
          \ if v:insertmode == 'i' |
          \   silent execute '!echo -ne "\e[6 q"' | redraw! |
          \ elseif v:insertmode == 'r' |
          \   silent execute '!echo -ne "\e[4 q"' | redraw! |
          \ endif
    au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
  endif
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"

  " for tmux iterm2 cursor
  " let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  " let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  " let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

function! Spelling()
  setlocal spell!
  if &spell
    set complete+=kspell
    echo "Spell mode enabled"
  else
    set complete-=kspell
    echo "Spell mode disabled"
  endif
endfunction

augroup autoSaveAndRead
  autocmd!
  " autocmd TextChanged,InsertLeave,FocusLost * silent! wall
  autocmd CursorHold * silent! checktime
augroup END
